Ex00:
A retenir:

1. Installation des dépendances
Tu as bien installé Express et ses types pour TypeScript.
PS: Cela te permet d’utiliser Express avec une autocomplétion et une vérification de types.
    - express : installe la bibliothèque Express, qui te permet de créer un serveur web.
    - @types/express : ajoute les définitions de types pour TypeScript, ce qui permet l’autocomplétion, 
                       la vérification de types et une meilleure aide dans l’éditeur (VS Code).

2. Structure du projet
Ton code source est dans src/.
Le fichier principal du serveur est server.ts.

3. Script de démarrage (Bonus)
Dans package.json, le script "start": "ts-node [server.ts](http://_vscodecontentref_/2)"
Lancer avec npm start

4. TypeScript
Tu utilises TypeScript pour bénéficier de la vérification de types et d’une meilleure robustesse.
Le fichier tsconfig.json contient des options avancées, mais retiens surtout :
"module": "nodenext" et "target": "esnext" : pour utiliser les modules et les dernières fonctionnalités JS.
"strict": true : pour une vérification stricte des types.
1. "strict": true
    Effet : Active le mode strict de TypeScript.
    Ce que ça fait :
    TypeScript vérifie plus sévèrement les types.
    Il t’oblige à bien typer tes variables, fonctions, etc.
    Il t’aide à éviter des erreurs courantes (ex : oublier de vérifier si une variable est undefined).
2. "module": "nodenext"
    Effet : Utilise le système de modules de Node.js (ES Modules).
    Ce que ça fait :
    Permet d’utiliser import/export comme en JavaScript moderne.
    Compatible avec les dernières versions de Node.js.
3. "target": "esnext"
    Effet : Compile ton code TypeScript vers la version la plus récente de JavaScript.
    Ce que ça fait :
    Tu peux utiliser les dernières fonctionnalités du langage (ex : async/await, classes, etc.).
    Le code généré sera moderne et optimisé pour les environnements récents.


5. Express
Tu importes Express et tu peux maintenant créer des routes (exercice suivant).
À retenir pour avancer :

Savoir lancer ton serveur avec npm start. (Bonus)
Savoir où écrire ton code (dans server.ts).
Comprendre que TypeScript t’aide à éviter des erreurs de typage.
Tu es prêt à ajouter des routes Express pour répondre à des requêtes HTTP.
